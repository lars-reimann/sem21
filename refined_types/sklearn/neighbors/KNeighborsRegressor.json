{
    "sklearn.neighbors.KNeighborsRegressor":{
        "weights":{
            "refined_type":{
                "kind":"UnionType",
                "types":[
                    {
                        "kind":"EnumType",
                        "values": [
                            "uniform",
                            "distance"
                        ]
                    },
                    {
                        "kind": "NamedType",
                        "name":"callable"
                    }
                ]
            },
            "docstring":{
                "type":"{'uniform', 'distance'} or callable, default='uniform'",
                "description":"Weight function used in prediction. Possible values:\n\n‘uniform’ : uniform weights. All points in each neighborhood are weighted equally.\n\n‘distance’ : weight points by the inverse of their distance. in this case, closer neighbors of a query point will have a greater influence than neighbors which are further away.\n\n[callable] : a user-defined function which accepts an array of distances, and returns an array of the same shape containing the weights.\n\nUniform weights are used by default."
            }
        },
        "algorithm":{
            "refined_type":{
                "kind":"EnumType",
                "values": [
                            "auto",
                            "ball_tree",
                            "kd_tree",
                            "brute"
                        ]
            },
            "docstring":{
                "type":"{'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto'",
                "description":"Algorithm used to compute the nearest neighbors:\n\n‘ball_tree’ will use BallTree\n\n‘kd_tree’ will use KDTree\n\n‘brute’ will use a brute-force search.\n\n‘auto’ will attempt to decide the most appropriate algorithm based on the values passed to fit method.\n\nNote: fitting on sparse input will override the setting of this parameter, using brute force."
            }
        }
    }
}
